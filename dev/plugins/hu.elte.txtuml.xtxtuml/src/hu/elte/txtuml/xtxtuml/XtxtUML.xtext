grammar hu.elte.txtuml.xtxtuml.XtxtUML with org.eclipse.xtext.xbase.Xbase
generate xtxtUML "http://www.elte.hu/txtuml/xtxtuml/XtxtUML"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype

// Start rule

XUFile :
	XUModelDeclaration | (
		'package' name=QualifiedName ';'
		importSection=XImportSection?
		elements+=XUModelElement*
	)
;

XUModelDeclaration :
	{XUModelDeclaration}
	model='model-package' name=QualifiedName ('as' modelName=STRING)? semiColon=';'
		// feature 'semiColon' is required because of the buggy formatter2 API
;

// Model level

XUModelElement
	: XUExecution
	| XUSignal
	| XUClass
	| XUAssociation
	| XUInterface
	| XUConnector
;

XUExecution :
	'execution' name=ValidID
		body=XBlockExpression ';'?
;

XUSignal :
	'signal' name=ValidID ('{'
		attributes+=XUSignalAttribute*
	'}' ';'? | ';')
;

XUClass : 
	'class' name=ValidID ('extends' superClass=[XUClass|QualifiedName])? ('{'
		members+=XUClassMember*
	'}' ';'? | ';')
;

XUAssociation returns XUAssociation:
	({XUAssociation} 'association' | {XUComposition} 'composition') name=ValidID '{'
		ends+=XUAssociationEnd*
	'}' ';'?
;

XUInterface :
	'interface' name=ValidID '{'
		receptions+=XUReception*
	'}' ';'?
;

XUReception :
	'reception' signal=[XUSignal|QualifiedName] ';'
;

XUConnector :
	('connector' | delegation?='delegation') name=ValidID '{'
		ends+=XUConnectorEnd*
	'}' ';'?
;

XUConnectorEnd :
	role=[XUAssociationEnd|QualifiedName] '->' port=[XUPort|QualifiedName] name=ValidID ';'
;

// Inner element level

// Signal- and Class-related

/*
 * TODO replace with general XUAttribute
 */
XUSignalAttribute :
	visibility=XUVisibility? type=JvmTypeReference name=ValidID ';'
;

/*
 * TODO left-factoring is no longer necessary
 */
XUClassMember
	: XUConstructor
	| XUDeclarationPrefix (
		{XUAttribute.prefix=current} name=ValidID ';' |
		{XUOperation.prefix=current} name=ValidID '('
			(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
				body=XBlockExpression ';'?
	  )
	| XUState
	| XUTransition
	| XUPort
;

/*
 * The inferred EClass is used in XUClassPropertyAccessExpression.
 */
XUClassProperty :
	XUPort | XUAssociationEnd
;

XUConstructor :
	visibility=XUVisibility? name=ValidID '('
		(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
			body=XBlockExpression ';'?
;

XUDeclarationPrefix :
	visibility=XUVisibility? type=JvmTypeReference
;

XUState :
	type=XUStateType name=ValidID ('{'
		members+=XUStateMember* 
	'}' ';'? | ';')
;

enum XUStateType :
	PLAIN = 'state' | INITIAL = 'initial' | CHOICE = 'choice' | COMPOSITE = 'composite'
;

XUStateMember :
	XUState | XUEntryOrExitActivity | XUTransition
;

XUEntryOrExitActivity :
	(entry?='entry' | exit='exit') // feature 'exit' is for error markers
		body=XBlockExpression ';'?
;

XUTransition :
	'transition' name=ValidID '{'
		members+=XUTransitionMember*
	'}' ';'?
;

XUTransitionMember
	: XUTransitionTrigger
	| XUTransitionVertex
	| XUTransitionEffect
	| XUTransitionGuard
	| XUTransitionPort
;

XUTransitionTrigger :
	triggerKeyword='trigger' trigger=[XUSignal|QualifiedName] ';'
		// feature 'triggerKeyword' is for error markers
;

XUTransitionVertex :
	(from?='from' | to='to') vertex=[XUState|QualifiedName] ';'
		// feature 'to' is for error markers
;

XUTransitionEffect :
	effect='effect' body=XBlockExpression ';'?
		// feature 'effect' is for error markers
;

XUTransitionGuard :
	{XUTransitionGuard} // required because of the buggy formatter2 API
	guard='guard' '(' (else?='else' | expression=XExpression) ')' ';'?
		// feature 'guard' is for error markers
;

XUTransitionPort :
	portKeyword='port' port=[XUPort|QualifiedName] ';'
		// feature 'portKeyword' is for error markers
;

XUPort :
	behavior?='behavior'? 'port' name=ValidID '{'
		members+=XUPortMember*
	'}' ';'?
;

XUPortMember :
	(required?='required' | provided='provided') interface=[XUInterface|QualifiedName] ';'
		// feature 'provided' is for error markers
;

// Association-related

XUAssociationEnd :
	notNavigable?='hidden'? multiplicity=XUMultiplicity? container?='container'?
		endClass=[XUClass|QualifiedName] name=ValidID ';'
;

XUMultiplicity :
	lower=INT (upperSet?='..' (upper=INT | upperInf?='*'))? | any?='*'
;

// Commons

enum XUVisibility :
	PACKAGE = 'package' | PRIVATE = 'private' | PROTECTED = 'protected' | PUBLIC = 'public'
;

// Actions

XUSendSignalExpression returns xbase::XExpression :
	{XUSendSignalExpression}
	'send' signal=XExpression 'to' target=XExpression
;

XUStartObjectExpression returns xbase::XExpression :
	{XUStartObjectExpression}
	'start' object=XExpression
;

XUDeleteObjectExpression returns xbase::XExpression :
	{XUDeleteObjectExpression}
	'delete' object=XExpression
;

XULogExpression returns xbase::XExpression :
	{XULogExpression}
	'log' message=XExpression
;

XUSignalAccessExpression returns xbase::XExpression :
	{XUSignalAccessExpression}
	trigger='trigger'
		// the sole purpose of the 'trigger' feature
		// is to provide a feature for validation
		// to put a marker on
;

XUStatementSemicolonNotNeeded returns xbase::XExpression
	: XIfExpression
	| XForLoopExpression
	| XBasicForLoopExpression
	| XWhileExpression
	| XSwitchExpression
	| XBlockExpression
	| XVariableDeclaration // semicolon included in rule
;

XUStatementSemicolonNeeded returns xbase::XExpression
	: XReturnExpression
	| XDoWhileExpression
	| XExpression
	| XUSendSignalExpression
	| XUStartObjectExpression
	| XUDeleteObjectExpression
	| XULogExpression
;

XParenthesizedXUExpression returns xbase::XExpression :
	'(' XExpression ')'
;

// Overridden Xbase rules

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed:
 *         <ul>
 *             <li>XCollectionLiteral</li>
 *             <li>XClosure</li>
 *             <li>XTypeLiteral</li>
 *         </ul>
 *     </li>
 * </ul>
 */
XLiteral returns xbase::XExpression
	: XBooleanLiteral
	| XNumberLiteral
	| XNullLiteral
	| XStringLiteral
;

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed: 
 *         <ul>
 *             <li>XBlockExpression</li>
 *             <li>XSwitchExpression</li>
 *             <li>XSynchronizedExpression</li>
 *             <li>XIfExpression</li>
 *             <li>XForLoopExpression</li>
 *             <li>XBasicForLoopExpression</li>
 *             <li>XWhileExpression</li>
 *             <li>XDoWhileExpression</li>
 *             <li>XThrowExpression</li>
 *             <li>XReturnExpression</li>
 *             <li>XTryCatchFinallyExpression</li>
 *             <li>XParenthesizedExpression</li>
 *         </ul>
 *     </li>
 *     <li>
 *         Added:
 *         <ul>
 *             <li>XParenthesizedRAlfExpression</li>
 *         </ul>
 *     </li>
 * </ul>
 */
XPrimaryExpression returns xbase::XExpression
	: XConstructorCall
	| XFeatureCall
	| XLiteral
	| XParenthesizedXUExpression
	| XUSignalAccessExpression
;

/*
 * Changes:
 * <ul>
 *     <li>at most one "simple" type argument</li>
 *     <li>parentheses are mandatory</li>
 *     <li>no XShortClosure in arguments</li>
 *     <li>no XClosure after the parameter list</li>
 * </ul>
 */
XConstructorCall returns xbase::XExpression :
	{xbase::XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] (
		=>'<' typeArguments+=JvmSimpleTypeReference '>'
	)?
	=>explicitConstructorCall?='(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')'
;

/*
 * Changes:
 * <ul>
 *     <li>restructured contained expressions</li>
 * </ul>
 */
XBlockExpression returns xbase::XExpression : 
	{xbase::XBlockExpression}
	'{' 
		(=>(expressions+=XUStatementSemicolonNotNeeded) | expressions+=XUStatementSemicolonNeeded ';')*
	'}'
;

/* 
 * Changes:
 * <ul>
 *     <li>predicate is an XExpression instead of XExpression</li>
 *     <li>body is an XBlockExpression instead of XExpression</li>
 * </ul>
 */
XWhileExpression returns xbase::XExpression :
	{xbase::XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=XBlockExpression
;

/* 
 * Changes:
 * <ul>
 *     <li>predicate is an XExpression instead of XExpression</li>
 *     <li>body is an XBlockExpression instead of XExpression</li>
 * </ul>
 */
XDoWhileExpression returns xbase::XExpression :
	{xbase::XDoWhileExpression}
	'do'
		body=XBlockExpression
	'while' '(' predicate=XExpression ')'
;

/*
 * Changes:
 * <ul>
 *     <li>no closures after parentheses</li>
 *     <li>no type parameters</li>
 *     <li>XExpression -> XExpression</li>
 * </ul>
 */
XFeatureCall returns xbase::XExpression :
	{xbase::XFeatureCall}
	feature=[types::JvmIdentifiableElement|IdOrSuper] (
		=>explicitOperationCall?='(' (
			  featureCallArguments+=XShortClosure
			| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? ')'
	)?
;

/*
 * Changes:
 * <ul>
 *     <li>XBlockExpression is mandatory, except for an "else if" construct</li>
 *     <li>XExpression -> XExpression</li>
 * </ul>
 */
XIfExpression returns xbase::XExpression :
	{xbase::XIfExpression}
	'if' '(' if=XExpression ')'
		then=XBlockExpression
	(=>'else' else=(XIfExpression | XBlockExpression))?
;

/*
 * Changes:
 * <ul>
 *     <li>JvmFormalParameter -> FullJvmFormalParameter (type is mandatory)</li>
 *     <li>XBlockExpression is mandatory</li>
 *     <li>XExpression -> XExpression</li>
 * </ul>
 */
XForLoopExpression returns xbase::XExpression :
	=>({xbase::XForLoopExpression}
	'for' '(' declaredParam=FullJvmFormalParameter ':') forExpression=XExpression ')'
		eachExpression=XBlockExpression
;

/*
 * Changes:
 * <ul>
 *     <li>no variable declaration allowed</li>
 *     <li>parentheses are mandatory</li>
 *     <li>XExpression -> XExpression</li>
 *     <li>default has to be a block</li>
 * </ul>
 */
XSwitchExpression returns xbase::XExpression :
	{xbase::XSwitchExpression}
	'switch' '(' switch=XExpression ')' '{'
		cases+=XCasePart*
		('default' ':' default=XBlockExpression)?
	'}'
;

/*
 * Changes:
 * <ul>
 *     <li>removed type guards (thus 'case' is mandatory)</li>
 *     <li>XExpression -> XExpression</li>
 *     <li>then attribute can only be a block</li>
 * </ul>
 */
XCasePart returns xbase::XCasePart :
	{xbase::XCasePart}
	'case' case=XExpression (':' then=XBlockExpression | fallThrough?=',')
;

/*
 * Changes:
 * <ul>
 *     <li>only one init and update expression is allowed</li>
 *     <li>changed Xbase expressions to corresponding RAlf-Xbase expressions</li>
 *     <li>XBlockExpression is mandatory</li>
 * </ul>
 */
XBasicForLoopExpression returns xbase::XBasicForLoopExpression : 
	{xbase::XBasicForLoopExpression}
	'for' '(' (initExpressions+=XExpression ';' | initExpressions+=XVariableDeclaration | ';') 
		expression=XExpression? ';' (updateExpressions+=XExpression)? ')'
			eachExpression=XBlockExpression
;

/*
 * Changes:
 * <ul>
 *     <li>removed 'var' and 'val' keywords</li>
 *     <li>type is mandatory</li>
 *     <li>XExpression as initialization</li>
 * </ul>
 */
XVariableDeclaration returns xbase::XExpression :
	=>({xbase::XVariableDeclaration} type=JvmTypeReference name=ValidID)
		('=' right=XExpression)? writeable?=';'
;

/*
 * Changes:
 * <ul>
 *     <li>only delegates to XAdditiveExpression</li>
 * </ul>
 */
XOtherOperatorExpression returns xbase::XExpression :
	XAdditiveExpression
;

/*
 * Changes:
 * <ul>
 *     <li>XExpression -> XExpression</li>
 * </ul>
 */
XReturnExpression returns xbase::XExpression :
	{xbase::XReturnExpression}
	'return' (->expression=XExpression)?
;

/*
 * Changes:
 * <ul>
 *     <li>no nullsafe feature call keyword</li>
 *     <li>no type arguments for features</li>
 *     <li>no closure after parenthesis</li>
 *     <li>XExpression -> XExpression in call arguments</li>
 * </ul>
 */
XMemberFeatureCall returns xbase::XExpression :
	XPrimaryExpression
	(
		=>(
			{xbase::XAssignment.assignable=current} ('.' | explicitStatic?='::')
			feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign
		)
		value=XAssignment
	| 
		=>(
			{xbase::XMemberFeatureCall.memberCallTarget=current} ('.' | explicitStatic?='::')
		) 
		feature=[types::JvmIdentifiableElement|IdOrSuper] (
			=>explicitOperationCall?='(' (
				  memberCallArguments+=XShortClosure
				| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
			)? ')'
		)?
	| 
		=>({XUClassPropertyAccessExpression.left=current} arrow='->') '('
			// feature 'arrow' is for error markers
			right=[XUClassProperty|QualifiedName]?
		')'
	)*
;

// New Xtype rules

JvmSimpleTypeReference returns types::JvmParameterizedTypeReference :
	{types::JvmParameterizedTypeReference} type=[types::JvmType|QualifiedName]
;

// Overridden Xtype rules

/*
 * Changes:
 * <ul>
 *     <li>
 *         Removed:
 *         <ul>
 *             <li>JvmGenericArrayTypeReference</li>
 * 	           <li>XFunctionTypeRef</li>
 *         </ul>
 *     </li>
 *     <li>
 *         Added:
 *         <ul>
 *             <li>JvmSimpleTypeReference</li>
 *         </ul>
 *     </li>
 * </ul> 
 */
JvmTypeReference returns types::JvmTypeReference :
	JvmParameterizedTypeReference | JvmSimpleTypeReference
;

/*
 * Changes:
 * <ul>
 *     <li>exactly one "simple" type argument</li>
 * </ul>
 */
JvmParameterizedTypeReference returns types::JvmParameterizedTypeReference :
	=>(type=[types::JvmType|QualifiedName] '<') arguments+=JvmSimpleTypeReference '>'
;

/*
 * Changes:
 * <ul>
 *     <li>removed extension imports</li>
 * </ul>
 */
XImportDeclaration returns xtype::XImportDeclaration : 
	'import' (
		(static?='static' importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID)) 
		| importedType=[types::JvmDeclaredType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildcard) ';'?
;
